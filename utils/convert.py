import json
import os

def load_notebook(path: str):
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def extract_code_cells(nb_json):
    cells = nb_json.get("cells", [])
    code_cells = []
    for idx, cell in enumerate(cells, start=1):
        if cell.get("cell_type") == "code":
            src = cell.get("source", "")
            if isinstance(src, list):
                code = "".join(src)
            else:
                code = src or ""
            code_cells.append((idx, code))
    return code_cells

def write_separate_py_files(code_cells, base_name, out_dir):
    written = []
    os.makedirs(out_dir, exist_ok=True)
    for n, (cell_index, code) in enumerate(code_cells, start=1):
        filename = f"{base_name}_cell_{n:03d}.py"
        path = os.path.join(out_dir, filename)
        header = (
            f"# Extracted from cell #{cell_index}\n"
            "# Generated by Notebook to Python file Converter\n\n"
        )
        with open(path, "w", encoding="utf-8") as f:
            f.write(header + code + ("\n" if not code.endswith("\n") else ""))
        written.append(path)
    return written

def write_combined_py(code_cells, base_name, out_dir):
    filename = f"{base_name}_combined.py"
    path = os.path.join(out_dir, filename)
    with open(path, "w", encoding="utf-8") as f:
        f.write(f"# Combined Python file extracted from notebook '{base_name}'.ipynb\n")
        f.write("# Sections correspond to notebook code cells.\n")
        f.write("# Generated by Notebook to Python file Converter\n\n")
        for n, (cell_index, code) in enumerate(code_cells, start=1):
            f.write(f"\n# ==== Cell {n} (original #{cell_index}) ====\n")
            f.write(code)
            if not code.endswith('\n'):
                f.write('\n')
    return path
